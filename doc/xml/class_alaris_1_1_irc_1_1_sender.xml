<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.1">
  <compounddef id="class_alaris_1_1_irc_1_1_sender" kind="class" prot="public">
    <compoundname>Alaris::Irc::Sender</compoundname>
    <basecompoundref refid="class_alaris_1_1_irc_1_1_command_builder" prot="public" virt="non-virtual">Alaris.Irc.CommandBuilder</basecompoundref>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ab5e09d85e98b5a75166b535826c64af8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal</type>
        <definition>internal Alaris.Irc.Sender.Sender</definition>
        <argsstring>(Connection connection)</argsstring>
        <name>Sender</name>
        <param>
          <type><ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref></type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="class_alaris_1_1_irc_1_1_sender" kindref="compound">Sender</ref> for a specific connection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="38" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ac979d937b7cae34f6d0bf48c9b03d3d2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alaris.Irc.Sender.IsEmpty</definition>
        <argsstring>(string aString)</argsstring>
        <name>IsEmpty</name>
        <param>
          <type>string</type>
          <declname>aString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="41" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a575171691c166410eaa82be2a602ced8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Alaris.Irc.Sender.Truncate</definition>
        <argsstring>(string parameter, int commandLength)</argsstring>
        <name>Truncate</name>
        <param>
          <type>string</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>commandLength</declname>
        </param>
        <briefdescription>
<para>Truncate parameters which cause a command line to be too long. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>The command parameter</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commandLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the command plus whitespace</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="53" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="52" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ae90dc167ebeaa270455aec34f3a9af88" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alaris.Irc.Sender.TooLong</definition>
        <argsstring>(StringBuilder buffer)</argsstring>
        <name>TooLong</name>
        <param>
          <type>StringBuilder</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="66" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a30017f33b6acc39333b56fe98bb49963" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal void</type>
        <definition>internal void Alaris.Irc.Sender.User</definition>
        <argsstring>(ConnectionArgs args)</argsstring>
        <name>User</name>
        <param>
          <type><ref refid="struct_alaris_1_1_irc_1_1_connection_args" kindref="compound">ConnectionArgs</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>The USER command is only used at the beginning of <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> to specify the username, hostname and realname of a new user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The user <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> data</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="77" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="76" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a1e58a119edd1aef579a1d8fc71729ec1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal void</type>
        <definition>internal void Alaris.Irc.Sender.Quit</definition>
        <argsstring>(string reason)</argsstring>
        <name>Quit</name>
        <param>
          <type>string</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>A client session is terminated with a quit message. </para>        </briefdescription>
        <detaileddescription>
<para>The server acknowledges this by sending an ERROR message to the client. </para><para>Before closing the <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> with the IRC server this method will call <computeroutput>Listener.beforeDisconnect()</computeroutput> and after the <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> is closed it will call <computeroutput> Listener.OnDisconnect()</computeroutput> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Reason for quitting.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="106" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="105" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1aa972a477bd9aa9ee87da7762f9694afa" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal void</type>
        <definition>internal void Alaris.Irc.Sender.Pong</definition>
        <argsstring>(string message)</argsstring>
        <name>Pong</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A PONG message is a reply to server PING message. Only called by the <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> object to keep the <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> alive.</para><para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOORIGIN </para></listitem>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The text sent by the IRC server in the PING message.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="137" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="136" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1afc13bc3b749efbbde27ad48a6334d07d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal void</type>
        <definition>internal void Alaris.Irc.Sender.Pass</definition>
        <argsstring>(string password)</argsstring>
        <name>Pass</name>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>The PASS command is used to set a &apos;Connection password&apos;. </para>        </briefdescription>
        <detaileddescription>
<para>The optional password can and MUST be set before any attempt to register the <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> is made. Currently this requires that user send a PASS command before sending the NICK/USER combination. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="154" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="153" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ae770eae16d473393d2878a92d28b53f0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal void</type>
        <definition>internal void Alaris.Irc.Sender.RegisterConnection</definition>
        <argsstring>(ConnectionArgs args)</argsstring>
        <name>RegisterConnection</name>
        <param>
          <type><ref refid="struct_alaris_1_1_irc_1_1_connection_args" kindref="compound">ConnectionArgs</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>User registration consists of 3 commands: 1. PASS 2. NICK 3. USER Pass will rarely fail but the proposed Nick might already be taken in which case the client will have to register by manually calling Nick and User. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="173" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="172" bodyend="177"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a0cdb38a95694edcae4500b686a0a70a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Join</definition>
        <argsstring>(string channel)</argsstring>
        <name>Join</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Join the specified channel. </para>        </briefdescription>
        <detaileddescription>
<para>Once a user has joined a channel, he receives information about all commands his server receives affecting the channel. This includes JOIN, MODE, KICK, PART, QUIT and of course PRIVMSG/NOTICE. This allows channel members to keep track of the other channel members, as well as channel modes.</para><para>If a JOIN is successful, the user receives a JOIN message as confirmation and is then sent the channel&apos;s topic ( <ref refid="class_alaris_1_1_irc_1_1_listener_1a71d42dced3495b18fdcba73eb3a54533" kindref="member">Listener.OnTopicRequest</ref> and the list of users who are on the channel ( <ref refid="class_alaris_1_1_irc_1_1_listener_1a333332ff4c7303a0dc81c5a184956eb4" kindref="member">Listener.OnNames</ref> ), which MUST include the user joining.</para><para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_BANNEDFROMCHAN </para></listitem>
<listitem>
<para>ERR_INVITEONLYCHAN </para></listitem>
<listitem>
<para>ERR_BADCHANNELKEY </para></listitem>
<listitem>
<para>ERR_CHANNELISFULL </para></listitem>
<listitem>
<para>ERR_BADCHANMASK </para></listitem>
<listitem>
<para>ERR_NOSUCHCHANNEL </para></listitem>
<listitem>
<para>ERR_TOOMANYCHANNELS </para></listitem>
<listitem>
<para>ERR_TOOMANYTARGETS </para></listitem>
<listitem>
<para>ERR_UNAVAILRESOURCE </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to join. Channel names must begin with &apos;&amp;&apos;, &apos;#&apos;, &apos;+&apos; or &apos;!&apos;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Most<sp/>channels<sp/>you<sp/>will<sp/>see<sp/>begin<sp/>with<sp/>the<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">.<sp/>The<sp/>others<sp/>are<sp/>reserved</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>special<sp/>channels<sp/>and<sp/>may<sp/>not<sp/>even<sp/>be<sp/>available<sp/>on<sp/>a<sp/>particular<sp/>server.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Join(</highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a76473de06a65746b9b94c8e9834e2464" kindref="member">Listener.OnJoin</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="216" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="215" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a293889b8ee12f71b15472b85a6aec6c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Join</definition>
        <argsstring>(string channel, string password)</argsstring>
        <name>Join</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Join a passworded channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to join</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel&apos;s pasword. Cannot be null or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid or the password is null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a76473de06a65746b9b94c8e9834e2464" kindref="member">Listener.OnJoin</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="241" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="240" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ae527d174522ced38ea86819570db0805" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Nick</definition>
        <argsstring>(string newNick)</argsstring>
        <name>Nick</name>
        <param>
          <type>string</type>
          <declname>newNick</declname>
        </param>
        <briefdescription>
<para>Change the user&apos;s nickname. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NONICKNAMEGIVEN </para></listitem>
<listitem>
<para>ERR_ERRONEUSNICKNAME </para></listitem>
<listitem>
<para>ERR_NICKNAMEINUSE </para></listitem>
<listitem>
<para>ERR_NICKCOLLISION </para></listitem>
<listitem>
<para>ERR_UNAVAILRESOURCE </para></listitem>
<listitem>
<para>ERR_RESTRICTED </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newNick</parametername>
</parameternamelist>
<parameterdescription>
<para>The new nickname</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Make<sp/>sure<sp/>and<sp/>verify<sp/>that<sp/>the<sp/>nick<sp/>is<sp/>valid<sp/>and<sp/>of<sp/>the<sp/>right<sp/>length</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nick<sp/>=<sp/>GetUserInput();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>Rfc2812Util.IsValidNick(<sp/>connection,<sp/>nick)<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Nick(<sp/>nick<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nickname is not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1af287e36b8d9382d023ae68631dbb625e" kindref="member">Listener.OnNick</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="292" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="291" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ae63cc7939ee0fd6c2c893cb21a79811d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.NickServ</definition>
        <argsstring>(string password)</argsstring>
        <name>NickServ</name>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Identifies the bot with NickServ. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password for the nick </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="317" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="316" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a926b4ae646ec8e0488e21a71770344f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.NickServRegister</definition>
        <argsstring>(string password, string email)</argsstring>
        <name>NickServRegister</name>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <param>
          <type>string</type>
          <declname>email</declname>
        </param>
        <briefdescription>
<para>Register&apos;s the nick with NickServ. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password for the nick. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>email</parametername>
</parameternamelist>
<parameterdescription>
<para>The e-mail to which the confirmation code will be sent to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="339" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="338" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1abca5d383bc7ea100e48ca2a977d40519" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Names</definition>
        <argsstring>(params string[] channels)</argsstring>
        <name>Names</name>
        <param>
          <type>params string[]</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
<para>Request a list of all nicknames on a given channel. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_TOOMANYMATCHES </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more channel names.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Make<sp/>the<sp/>request<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>single<sp/>channel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Names(<sp/></highlight><highlight class="stringliteral">&quot;#test&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Make<sp/>the<sp/>request<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>several<sp/>channels<sp/>at<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Names(<sp/></highlight><highlight class="stringliteral">&quot;#test&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;#alpha&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;#bravo&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If any of the channels are not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a333332ff4c7303a0dc81c5a184956eb4" kindref="member">Listener.OnNames</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="379" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="378" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a0a71792c41246c471b7867930df5ac84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.AllNames</definition>
        <argsstring>()</argsstring>
        <name>AllNames</name>
        <briefdescription>
<para>Request a list of all visible channels along with their users. If the server allows this kind of request then expect a rather large reply. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_TOOMANYMATCHES </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a333332ff4c7303a0dc81c5a184956eb4" kindref="member">Listener.OnNames</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="413" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="412" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a27569ab2bf3ba092bae3b93819442414" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.List</definition>
        <argsstring>(params string[] channels)</argsstring>
        <name>List</name>
        <param>
          <type>params string[]</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
<para>Request basic information about a channel, i.e. number of visible users and topic. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_TOOMANYMATCHES </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more channel names.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Make<sp/>the<sp/>request<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>single<sp/>channel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.List(<sp/></highlight><highlight class="stringliteral">&quot;#test&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Make<sp/>the<sp/>request<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>several<sp/>channels<sp/>at<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.List(<sp/></highlight><highlight class="stringliteral">&quot;#test&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;#alpha&quot;</highlight><highlight class="normal">,#</highlight><highlight class="stringliteral">&quot;bravo&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If any of the channels are not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1acb66b26f7e1ab36fdc0e2d0dbf179b31" kindref="member">Listener.OnList</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="438" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="437" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a1e4e590dee0e25277811faced0a757fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.AllList</definition>
        <argsstring>()</argsstring>
        <name>AllList</name>
        <briefdescription>
<para>Request basic information for all the channels on the current network. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_TOOMANYMATCHES </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1acb66b26f7e1ab36fdc0e2d0dbf179b31" kindref="member">Listener.OnList</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="472" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="471" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ae9a97b3cae981bc5b8b40e95cc5e46ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.ChangeTopic</definition>
        <argsstring>(string channel, string newTopic)</argsstring>
        <name>ChangeTopic</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>string</type>
          <declname>newTopic</declname>
        </param>
        <briefdescription>
<para>Change the topic of the given channel. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_NOTONCHANNEL </para></listitem>
<listitem>
<para>ERR_CHANOPRIVSNEEDED </para></listitem>
<listitem>
<para>ERR_NOCHANMODES </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newTopic</parametername>
</parameternamelist>
<parameterdescription>
<para>The new topic.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.ChangeTopic(<sp/></highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Beta<sp/>27<sp/>Released&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid or the topic is null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1ae4cab4dda1eb0df1fa87ac761031beb6" kindref="member">Listener.OnTopicChanged</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="497" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="496" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1aae0268c81ac4f4f1aa6321d59cf8c593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.ClearTopic</definition>
        <argsstring>(string channel)</argsstring>
        <name>ClearTopic</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Clear the channel&apos;s topic. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_NOTONCHANNEL </para></listitem>
<listitem>
<para>ERR_CHANOPRIVSNEEDED </para></listitem>
<listitem>
<para>ERR_NOCHANMODES </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1ae4cab4dda1eb0df1fa87ac761031beb6" kindref="member">Listener.OnTopicChanged</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="537" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="536" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a8a9e10225e39f020b5d0cc0b0d4bad11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.RequestTopic</definition>
        <argsstring>(string channel)</argsstring>
        <name>RequestTopic</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Request the topic for the given channel. </para>        </briefdescription>
        <detaileddescription>
<para>The reply will be sent via the <ref refid="class_alaris_1_1_irc_1_1_listener_1a71d42dced3495b18fdcba73eb3a54533" kindref="member">Listener.OnTopicRequest</ref> event. If there is no topic then <ref refid="class_alaris_1_1_irc_1_1_listener_1acb02613cb07d203fc14baa385b42a479" kindref="member">Listener.OnError</ref> will be called with a code of ReplyCode.RPL_NOTOPIC. </para><para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_NOTONCHANNEL </para></listitem>
<listitem>
<para>ERR_CHANOPRIVSNEEDED </para></listitem>
<listitem>
<para>ERR_NOCHANMODES </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a71d42dced3495b18fdcba73eb3a54533" kindref="member">Listener.OnTopicRequest</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="574" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="573" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ac02a347773de2cbd05e9e4cc76feef21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Part</definition>
        <argsstring>(string reason, params string[] channels)</argsstring>
        <name>Part</name>
        <param>
          <type>string</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>params string[]</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
<para>Leave the given channel. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_NOSUCHCHANNEL </para></listitem>
<listitem>
<para>ERR_NOTONCHANNEL </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>A goodbye message.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more channels to leave.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Leave<sp/>a<sp/>single<sp/>channel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Part(</highlight><highlight class="stringliteral">&quot;Goodbye&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;#test&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Leave<sp/>several<sp/>at<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Part(<sp/></highlight><highlight class="stringliteral">&quot;Goodbye&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;#test&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;#alpha&quot;</highlight><highlight class="normal">,#</highlight><highlight class="stringliteral">&quot;bravo&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid or the reason is null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a9360d4ee0f5f96a8eb5afa6eeb529b46" kindref="member">Listener.OnPart</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="613" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="612" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a00d2d9ef8ab0a00c32f2664bc54cc45b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Part</definition>
        <argsstring>(string channel)</argsstring>
        <name>Part</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Leave a channel without giving a reason. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to leave.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a9360d4ee0f5f96a8eb5afa6eeb529b46" kindref="member">Listener.OnPart</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="647" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="646" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ad9b90ba47ef2282365e571a7682dceac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.PublicNotice</definition>
        <argsstring>(string channel, string message)</argsstring>
        <name>PublicNotice</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send a notice to a channel. </para>        </briefdescription>
        <detaileddescription>
<para>The difference between a notice and a normal message is that automatic replies must never be sent in response to a notice. This rule applies to servers too - they must not send any error reply back to the client on receipt of a notice. The object of this rule is to avoid loops between clients automatically sending something in response to something it received. See <ref refid="class_alaris_1_1_irc_1_1_sender_1abb1d26ba86b3cebe8b36a2ca49b4c566" kindref="member">Sender.PublicMessage</ref> for possible errors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Text message. If the text is too large to be sent in one piece it will be broken up into smaller strings which will then be sent individually.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid or the message is empty or null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a36cf0fc097b4c92ba3986f4a200a151d" kindref="member">Listener.OnPublicNotice</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="680" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="679" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a422ab65376c0d5c245609f88a3d6924b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.PrivateNotice</definition>
        <argsstring>(string nick, string message)</argsstring>
        <name>PrivateNotice</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send a notice to a user. </para>        </briefdescription>
        <detaileddescription>
<para>The difference between a notice and a normal message is that automatic replies must never be sent in response to a notice. This rule applies to servers too - they must not send any error reply back to the client on receipt of a notice. The object of this rule is to avoid loops between clients automatically sending something in response to something it received. See <ref refid="class_alaris_1_1_irc_1_1_sender_1a147245ec478460816364efbd4603cffc" kindref="member">Sender.PrivateMessage</ref> for possible errors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>The target nickname.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Text message. If the text is too large to be sent in one piece it will be broken up into smaller strings which will then be sent individually.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nick is not valid or the message is empty or null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a7689ef85496a5795e179b229b2a4a378" kindref="member">Listener.OnPrivateNotice</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="728" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="727" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1abb1d26ba86b3cebe8b36a2ca49b4c566" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.PublicMessage</definition>
        <argsstring>(string channel, string message)</argsstring>
        <name>PublicMessage</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send a message to all the users in a channel. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_CANNOTSENDTOCHAN </para></listitem>
<listitem>
<para>ERR_NOTEXTTOSEND </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>A message. If the message is too long it will be broken up into smaller piecese which will be sent sequentially.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid or if the message is null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a1efe618a84ac122f64001ab63460953b" kindref="member">Listener.OnPublic</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="775" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="774" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a147245ec478460816364efbd4603cffc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.PrivateMessage</definition>
        <argsstring>(string nick, string message)</argsstring>
        <name>PrivateMessage</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send a message to a user. </para>        </briefdescription>
        <detaileddescription>
<para>If the target user status is away, the <ref refid="class_alaris_1_1_irc_1_1_listener_1a0a268ad6d71c8f524bb1ed766630be22" kindref="member">Listener.OnAway</ref> event will be called along with the away message if any. </para><para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NORECIPIENT </para></listitem>
<listitem>
<para>ERR_NOTEXTTOSEND </para></listitem>
<listitem>
<para>ERR_NOSUCHNICK </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>The target user.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>A message. If the message is too long it will be broken up into smaller piecese which will be sent sequentially.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nickname is not valid or if the message is null or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a86ee394521631ffb7e2a37ee009c7476" kindref="member">Listener.OnPrivate</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="826" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="825" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a39a5e0a31a8ad5040dac0a80ede013bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Invite</definition>
        <argsstring>(string who, string channel)</argsstring>
        <name>Invite</name>
        <param>
          <type>string</type>
          <declname>who</declname>
        </param>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Invite a user to a channel. </para>        </briefdescription>
        <detaileddescription>
<para>The parameter nickname is the nickname of the person to be invited to the target channel channel. There is no requirement that the channel the target user is being invited to must exist or be a valid channel. However, if the channel exists, only members of the channel are allowed to invite other users. When the channel has invite-only flag set, only channel operators may an invite.</para><para>Only the user inviting and the user being invited will receive notification of the invitation. Other channel members are not notified. (This is unlike the mode changes, and is occasionally the source of trouble for users.)</para><para>After the invite is sent the IRC server will signal that it was correctly received by calling <ref refid="class_alaris_1_1_irc_1_1_listener_1a7c2ace36e13c3bfaa199badbc8a00acf" kindref="member">Listener.OnInviteSent</ref>. </para><para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_NOSUCHNICK </para></listitem>
<listitem>
<para>ERR_NOTONCHANNEL </para></listitem>
<listitem>
<para>ERR_USERONCHANNEL </para></listitem>
<listitem>
<para>ERR_CHANOPRIVSNEEDED </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>who</parametername>
</parameternamelist>
<parameterdescription>
<para>The nick of the person to invite</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel they are invited to join.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nickname or channel is not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a7c2ace36e13c3bfaa199badbc8a00acf" kindref="member">Listener.OnInviteSent</ref>, <ref refid="class_alaris_1_1_irc_1_1_listener_1a3354161ee11f5a156f6a2e5f060f8261" kindref="member">Listener.OnInvite</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="892" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="891" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ac012d909b8da3fe4cf9823b34519e804" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Kick</definition>
        <argsstring>(string channel, string reason, params string[] nicks)</argsstring>
        <name>Kick</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>string</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>params string[]</type>
          <declname>nicks</declname>
        </param>
        <briefdescription>
<para>Kick a user off a channel. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Replies <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_NOSUCHCHANNEL </para></listitem>
<listitem>
<para>ERR_BADCHANMASK </para></listitem>
<listitem>
<para>ERR_CHANOPRIVSNEEDED </para></listitem>
<listitem>
<para>ERR_USERNOTINCHANNEL </para></listitem>
<listitem>
<para>ERR_NOTONCHANNEL </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nicks</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more users to kick.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Which channel to kick the user from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Why.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal"><ref refid="class_alaris_1_1_irc_1_1_sender_1ac012d909b8da3fe4cf9823b34519e804" kindref="member" tooltip="Kick a user off a channel.">Kick</ref><sp/>a<sp/>single<sp/>user</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Kick(</highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;No<sp/>Perl<sp/>please&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;lwall&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Kicks<sp/>several<sp/>users<sp/>at<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Kick(<sp/></highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bye&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;John&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Dick&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Harry&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nickname or channel is not valid or the reason is null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a8f1b1ae768ccb28f8e855782d3204fe6" kindref="member">Listener.OnKick</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="937" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="936" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a4846350dcbef45055452a70d801e10bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Ison</definition>
        <argsstring>(string nick)</argsstring>
        <name>Ison</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <briefdescription>
<para>Request to know if a user is currenlty on IRC. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Target user.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Query<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>nick</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Ison(<sp/></highlight><highlight class="stringliteral">&quot;joe&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nickname is not valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a8cc017d23b18674a50e406132275920c" kindref="member">Listener.OnIson</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="984" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="983" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1abb63c22961cb67dda3be4a7390da895d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Who</definition>
        <argsstring>(string mask, bool operatorsOnly)</argsstring>
        <name>Who</name>
        <param>
          <type>string</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>operatorsOnly</declname>
        </param>
        <briefdescription>
<para>Request a list of users who match a given query. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_TOOMANYLINES </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask passed to Who is matched against a users&apos; host, real name or nickname. It uses the wildcard system of matching where the &apos;*&apos; can stand for any number of characters and &apos;?&apos; stands for any single character. The query will only match against one component so it is not possible to match against both nick and host for example. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operatorsOnly</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the query should only try to match the mask to users designated operators.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Find<sp/>all<sp/>users<sp/>from<sp/>Russia,<sp/>i.e.<sp/>who<sp/>have<sp/>.ru<sp/>in<sp/>their<sp/>hostnames</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Who(</highlight><highlight class="stringliteral">&quot;*.ru&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Find<sp/>all<sp/>users<sp/>from<sp/>clan<sp/>[DX],<sp/>i.e.<sp/>have<sp/></highlight><highlight class="stringliteral">&apos;[DX]&apos;</highlight><highlight class="normal"><sp/>in<sp/>their<sp/>nick</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Who(</highlight><highlight class="stringliteral">&quot;[DX]*&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the mask is null,empty, or too long.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1aed241622e0e656e5b23cef3c67149ab9" kindref="member">Listener.OnWho</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1023" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1022" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a4c3c302a961fdb071aa36fd43418c391" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.AllWho</definition>
        <argsstring>()</argsstring>
        <name>AllWho</name>
        <briefdescription>
<para>Request a list all visible users (whose mode is not +i) and those who don&apos;t have a common channel with the requesting client are listed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1aed241622e0e656e5b23cef3c67149ab9" kindref="member">Listener.OnWho</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1052" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1051" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a1118f695bdbd74a6353e279803f2bbd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Whois</definition>
        <argsstring>(string nick)</argsstring>
        <name>Whois</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <briefdescription>
<para>Request detailed information about a given user. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHNICK </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>The nick of the query subject.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nick is invalid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a3195714fb270717ab67b9535167d1427" kindref="member">Listener.OnWhois</ref>, <ref refid="class_alaris_1_1_irc_1_1_whois_info" kindref="compound">WhoisInfo</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1073" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1072" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a8d97d09395a73ad57e7333cd9c2bcfb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Away</definition>
        <argsstring>(string message)</argsstring>
        <name>Away</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Set the user status to away and set an automatic reply to any private message. </para>        </briefdescription>
        <detaileddescription>
<para>This functions as a kind of IRC answering machine. It is normally used to indicate that the user is away from IRC.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message that will be sent back to others when you are away. Overly long message will be truncated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the message is null or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a0a268ad6d71c8f524bb1ed766630be22" kindref="member">Listener.OnAway</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1100" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1099" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1acc3dc4808321ad9e390a477fc8ad4a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.UnAway</definition>
        <argsstring>()</argsstring>
        <name>UnAway</name>
        <briefdescription>
<para>Turns off the away status and the accompanying message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1120" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1119" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a83ce223f3a0ba0b22bab4ac72d61ce76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Whowas</definition>
        <argsstring>(string nick)</argsstring>
        <name>Whowas</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <briefdescription>
<para>Request information about a user who is no longer on IRC. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NONICKNAMEGIVEN </para></listitem>
<listitem>
<para>ERR_WASNOSUCHNICK </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Target nick</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nick is invalid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a2f00a851a68cb4834c29338988282703" kindref="member">Listener.OnWhowas</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1141" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1140" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1abbf23702f63274e30f9a5077d5dcde8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Whowas</definition>
        <argsstring>(string nick, int count)</argsstring>
        <name>Whowas</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Request information about a user who is no longer on IRC but with a maximum number of responses. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NONICKNAMEGIVEN </para></listitem>
<listitem>
<para>ERR_WASNOSUCHNICK </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of replies the IRC server should send back.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Target nick</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nick is invalid or if count is less than or equal to zero.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a2f00a851a68cb4834c29338988282703" kindref="member">Listener.OnWhowas</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1173" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1172" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1aa02228d0bcad8d431ba5205b9dfb52e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.RequestUserModes</definition>
        <argsstring>()</argsstring>
        <name>RequestUserModes</name>
        <briefdescription>
<para>Request the modes set for this user. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a60db0e5bd6cdca229202c2818602cf08" kindref="member">Listener.OnUserModeRequest</ref>, <ref refid="namespace_alaris_1_1_irc_1a02207681338c889db552570ac74a0575" kindref="member">UserMode</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1200" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1199" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1aa028e9126ff45c91768cbe3bee139bd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.ChangeUserMode</definition>
        <argsstring>(ModeAction action, UserMode mode)</argsstring>
        <name>ChangeUserMode</name>
        <param>
          <type><ref refid="namespace_alaris_1_1_irc_1acf7a11ffe5574ce3944b8526a3cebb6e" kindref="member">ModeAction</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type><ref refid="namespace_alaris_1_1_irc_1a02207681338c889db552570ac74a0575" kindref="member">UserMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Changes this client&apos;s mode. To change another nick&apos;s mode use <ref refid="class_alaris_1_1_irc_1_1_sender_1a1c89fd00a1636b403ca1873b536087f1" kindref="member">ChangeChannelMode</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Away cannot be set here but should be set using <ref refid="class_alaris_1_1_irc_1_1_sender_1a8d97d09395a73ad57e7333cd9c2bcfb1" kindref="member">Sender.Away</ref> or removed using <ref refid="class_alaris_1_1_irc_1_1_sender_1acc3dc4808321ad9e390a477fc8ad4a32" kindref="member">Sender.UnAway</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Add or remove a mode.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode to be changed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Turn<sp/>off<sp/>invisibility</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.ChangeUserMode(<sp/><ref refid="namespace_alaris_1_1_irc_1acf7a11ffe5574ce3944b8526a3cebb6e" kindref="member" tooltip="Whether a mode has been added or removed.">ModeAction</ref>.Remove,<sp/><ref refid="namespace_alaris_1_1_irc_1a02207681338c889db552570ac74a0575" kindref="member" tooltip="The possible user modes.">UserMode</ref>.Invisible<sp/>);</highlight></codeline>
<codeline><highlight class="normal">Turn<sp/>on<sp/>wallops<sp/>(and<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>a<sp/>lot<sp/>of<sp/>IRC<sp/>garbage)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.ChangeUserMode(<sp/><ref refid="namespace_alaris_1_1_irc_1acf7a11ffe5574ce3944b8526a3cebb6e" kindref="member" tooltip="Whether a mode has been added or removed.">ModeAction</ref>.Add,<sp/><ref refid="namespace_alaris_1_1_irc_1a02207681338c889db552570ac74a0575" kindref="member" tooltip="The possible user modes.">UserMode</ref>.Wallops<sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the UserMode parameter is Away.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1aa4e013e4003cf3c2e16587b21e160839" kindref="member">Listener.OnUserModeChange</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1226" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1225" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a1c89fd00a1636b403ca1873b536087f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.ChangeChannelMode</definition>
        <argsstring>(string channel, ModeAction action, ChannelMode mode, string param)</argsstring>
        <name>ChangeChannelMode</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="namespace_alaris_1_1_irc_1acf7a11ffe5574ce3944b8526a3cebb6e" kindref="member">ModeAction</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type><ref refid="namespace_alaris_1_1_irc_1acdfca904add2aa3f1a6777a58761df5a" kindref="member">ChannelMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>string</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Change a channel&apos;s mode. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_KEYSET </para></listitem>
<listitem>
<para>ERR_NOCHANMODES </para></listitem>
<listitem>
<para>ERR_CHANOPRIVSNEEDED </para></listitem>
<listitem>
<para>ERR_USERNOTINCHANNEL </para></listitem>
<listitem>
<para>ERR_UNKNOWNMODE </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Add or remove.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The target mode.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional parameter for certain modes. If the mode does not require one this should be null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Give<sp/></highlight><highlight class="stringliteral">&apos;nick&apos;</highlight><highlight class="normal"><sp/>the<sp/>ability<sp/>to<sp/>talk<sp/>on<sp/>a<sp/>moderated<sp/>channel,<sp/>i.e.<sp/>add<sp/>Voice</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.ChangeChannelMode(</highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_alaris_1_1_irc_1acf7a11ffe5574ce3944b8526a3cebb6e" kindref="member" tooltip="Whether a mode has been added or removed.">ModeAction</ref>.Add,<sp/><ref refid="namespace_alaris_1_1_irc_1acdfca904add2aa3f1a6777a58761df5a" kindref="member" tooltip="Possible channel modes.">ChannelMode</ref>.Voice,</highlight><highlight class="stringliteral">&quot;nick&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Make<sp/>a<sp/>channel<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.ChangeChannelMode(<sp/></highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_alaris_1_1_irc_1acf7a11ffe5574ce3944b8526a3cebb6e" kindref="member" tooltip="Whether a mode has been added or removed.">ModeAction</ref>.Add,<sp/><ref refid="namespace_alaris_1_1_irc_1acdfca904add2aa3f1a6777a58761df5a" kindref="member" tooltip="Possible channel modes.">ChannelMode</ref>.Private,<sp/>null<sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is invalid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a2f2887347e52e01d160ffc2968d9de0e" kindref="member">Listener.OnChannelModeChange</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1271" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1270" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ab7f4751bb6b94759bcc96a531fe294d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.RequestChannelList</definition>
        <argsstring>(string channel, ChannelMode mode)</argsstring>
        <name>RequestChannelList</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="namespace_alaris_1_1_irc_1acdfca904add2aa3f1a6777a58761df5a" kindref="member">ChannelMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Request the list of users that a channel keeps for the given mode.. </para>        </briefdescription>
        <detaileddescription>
<para>Each channel maintains a list of those banned, those excepted from a ban, those on automatic invite, and the channel creator. Use this method to retreieve one of those lists.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The taregt channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be one of: Ban, Exception, Invitation, or ChannelCreator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Request<sp/>the<sp/>channel</highlight><highlight class="stringliteral">&apos;s<sp/>banned<sp/>list</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.RequestChannelList(&quot;#thresher&quot;,<sp/>ChannelMode.Ban<sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel is invalid or the ChannelMode is not one of the 4 allowed types.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a1b0d81b126046e0c944b3d32c020018d" kindref="member">Listener.OnChannelList</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1313" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1312" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a70c8ffb3099d7e490e992b10e74dd32d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.RequestChannelModes</definition>
        <argsstring>(string channel)</argsstring>
        <name>RequestChannelModes</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Request the modes of a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel is invalid, null, or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1ae4045acaad4d2454490f2ce510439fed" kindref="member">Listener.OnChannelModeRequest</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1344" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1343" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ab4dd7f6e2b2e764a8883c3e8a8e399a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Action</definition>
        <argsstring>(string channel, string description)</argsstring>
        <name>Action</name>
        <param>
          <type>string</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>string</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Send an action message to a channel. </para>        </briefdescription>
        <detaileddescription>
<para>This is actually a CTCP command but it is so widely used that it is included here. These are the &apos; Laughs&apos; type messages.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>A description of the action. If this is too long it will be truncated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Express<sp/>an<sp/>emotion...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Action(</highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Kicks<sp/>down<sp/>the<sp/>door&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the channel name is not valid. Will also be thrown if the description is null or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a11914c3362bd00a835a479d0764cb192" kindref="member">Listener.OnAction</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1376" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1375" bodyend="1396"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ae5d728129206ae200adbfbf32241c16f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.PrivateAction</definition>
        <argsstring>(string nick, string description)</argsstring>
        <name>PrivateAction</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <param>
          <type>string</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Send an action message to a user instead of a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>The target user.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>A description of the action. If this is too long it will be truncated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nickname is not valid. Will also be thrown if the description is null or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a8f7c85ef0c706bc751cf11a39c90d19c" kindref="member">Listener.OnPrivateAction</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1407" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1406" bodyend="1427"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a0465a1de558209924eeebd2581fc7fcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Register</definition>
        <argsstring>(string newNick)</argsstring>
        <name>Register</name>
        <param>
          <type>string</type>
          <declname>newNick</declname>
        </param>
        <briefdescription>
<para>Register this connection with the IRC server. </para>        </briefdescription>
        <detaileddescription>
<para>This method should be called when the initial attempt to register with the IRC server fails because the nick is already taken. To be informed when this fails you must be subscribed to <ref refid="class_alaris_1_1_irc_1_1_listener_1ae64fd1185b1db5cd0e8a130174e385cd" kindref="member">Listener.OnNickError</ref>. If <ref refid="class_alaris_1_1_irc_1_1_connection_1a8d8a856f0d4ccbe1db7ac0f86f5f3cdd" kindref="member">Connection.HandleNickTaken</ref> is set to true (which is its default value) then Thresher will automatically create an alternate nick and use that. The new nick can be retrieved by calling Connection.ConnectionData.Nick.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newNick</parametername>
</parameternamelist>
<parameterdescription>
<para>The changed nick name.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_name_generator" kindref="compound">NameGenerator</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1441" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1440" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a70f14aa3490c1a2be0931cc43d6acad9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Raw</definition>
        <argsstring>(string message)</argsstring>
        <name>Raw</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send an arbitrary text message to the IRC server. </para>        </briefdescription>
        <detaileddescription>
<para>Messages that are too long will be truncated. There is no corresponding events so it will be necessary to check for standard reply codes and possibly errors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>A text message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the message is null or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1457" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1456" bodyend="1472"/>
        <referencedby refid="class_alaris_1_1_irc_1_1_dcc_1_1_dcc_file_session_1aa80c325c4bc0e8a54f485da0ca5b0722" compoundref="_dcc_file_session_8cs" startline="488" endline="498">Alaris.Irc.Dcc.DccFileSession::Get</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a1ec10168e7129cfe8c421e6d453557bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Version</definition>
        <argsstring>()</argsstring>
        <name>Version</name>
        <briefdescription>
<para>Request the version of the IRC server program. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a58f5fec6f3bde72b3a917d336a827249" kindref="member">Listener.OnVersion</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1484" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1483" bodyend="1486"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a57f756e3acf1a393b0d0b4b414f0b358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Version</definition>
        <argsstring>(string targetServer)</argsstring>
        <name>Version</name>
        <param>
          <type>string</type>
          <declname>targetServer</declname>
        </param>
        <briefdescription>
<para>Used to query the version of the IRC server program. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>targetServer</parametername>
</parameternamelist>
<parameterdescription>
<para>The FQDN of the IRC server to query. Wildcards are allowed. Must be a server part of the same IRC network this connection is connected to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a58f5fec6f3bde72b3a917d336a827249" kindref="member">Listener.OnVersion</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1500" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1499" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1abf4a375ed7f5a14dc247e58f11da5113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Motd</definition>
        <argsstring>()</argsstring>
        <name>Motd</name>
        <briefdescription>
<para>Request the &quot;Message Of The Day&quot; from the current server. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOMOTD </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1ac45f7d7c13d6ed8e1c8e89500906ddd8" kindref="member">Listener.OnMotd</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1525" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1524" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1afa4e8050c0099ea2feb2ffa5f4c999d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Motd</definition>
        <argsstring>(string targetServer)</argsstring>
        <name>Motd</name>
        <param>
          <type>string</type>
          <declname>targetServer</declname>
        </param>
        <briefdescription>
<para>Request the &quot;Message Of The Day&quot; from the given server. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOMOTD </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>targetServer</parametername>
</parameternamelist>
<parameterdescription>
<para>The FQDN of the IRC server to query. Wildcards are allowed. Must be a server part of the same IRC network this connection is connected to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1ac45f7d7c13d6ed8e1c8e89500906ddd8" kindref="member">Listener.OnMotd</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1541" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1540" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a97d294668ccb353b709a099d3f939dc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Time</definition>
        <argsstring>()</argsstring>
        <name>Time</name>
        <briefdescription>
<para>Request the local time from the current server. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a3d1321dc6f2f0b9f2489f97452d2c1f0" kindref="member">Listener.OnTime</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1560" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1559" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ab3b9f3bf2f050e5428da2662f82c1caf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Time</definition>
        <argsstring>(string targetServer)</argsstring>
        <name>Time</name>
        <param>
          <type>string</type>
          <declname>targetServer</declname>
        </param>
        <briefdescription>
<para>Request the local time from the given server. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>targetServer</parametername>
</parameternamelist>
<parameterdescription>
<para>The FQDN of the IRC server to query. Wildcards are allowed. Must be a server part of the same IRC network this connection is connected to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a3d1321dc6f2f0b9f2489f97452d2c1f0" kindref="member">Listener.OnTime</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1576" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1575" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a0b085b6869e29372ac4c9b5db0673dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Wallops</definition>
        <argsstring>(string message)</argsstring>
        <name>Wallops</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send a message to all users who have the &apos;w&apos; user mode set. </para>        </briefdescription>
        <detaileddescription>
<para>This will likely be forbidden to all but IRC OPS.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Any text message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the message is empty or null.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1599" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1598" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ad806ab2829530ff482aa4dc17799eed2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Info</definition>
        <argsstring>()</argsstring>
        <name>Info</name>
        <briefdescription>
<para>Request information about the software of the current IRC server. </para>        </briefdescription>
        <detaileddescription>
<para>This returns information describing the server: its version, when it was compiled, the patchlevel, when it was started, and any other miscellaneous information which may be considered relevant.</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a719e932c4fc54bb62edce3e435dae100" kindref="member">Listener.OnInfo</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1627" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1626" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a63b302f80042b9f189425b4f328d205f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Info</definition>
        <argsstring>(string target)</argsstring>
        <name>Info</name>
        <param>
          <type>string</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Request information about the software of the target IRC server. </para>        </briefdescription>
        <detaileddescription>
<para>This returns information describing the server: its version, when it was compiled, the patchlevel, when it was started, and any other miscellaneous information which may be considered relevant.</para><para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Either a user nickname or a specific IRC server connected to the current network. If it is a nickname then return the information about the server to which &apos;nick&apos; is connected. Can include wildcards.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Query<sp/>a<sp/>specific<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Info(<sp/></highlight><highlight class="stringliteral">&quot;sunray.sharkbite.org&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Query<sp/>the<sp/>server<sp/>Bob<sp/>is<sp/>connected<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Info(</highlight><highlight class="stringliteral">&quot;Bob&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a719e932c4fc54bb62edce3e435dae100" kindref="member">Listener.OnInfo</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1656" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1655" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a879bd90bdca103f95822876ae2fef57f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Admin</definition>
        <argsstring>()</argsstring>
        <name>Admin</name>
        <briefdescription>
<para>Request information about the administrator of the current IRC server. </para>        </briefdescription>
        <detaileddescription>
<para>This returns information such as the administrator&apos;s email address, geographical location and whatever else the IRC is configured to send as a response.</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a5704c344c8fb235e34fc789d19e056d2" kindref="member">Listener.OnAdmin</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1681" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1680" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1aa03cea81188c91971c2b426b2182b136" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Admin</definition>
        <argsstring>(string target)</argsstring>
        <name>Admin</name>
        <param>
          <type>string</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Request information about the administrator of the target IRC server. </para>        </briefdescription>
        <detaileddescription>
<para>This returns information such as the administrator&apos;s email address, geographical location and whatever else the IRC is configured to send as a response. </para><para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Either a user nickname or a specific IRC server connected to the current network. If it is a nickname then return the information about the server to which &apos;nick&apos; is connected. Can include wildcards.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Request<sp/>info<sp/>about<sp/>the<sp/>administrator<sp/>of<sp/>the<sp/>specified<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Admin(<sp/></highlight><highlight class="stringliteral">&quot;sunray.sharkbite.org&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Request<sp/>info<sp/>about<sp/>the<sp/>administrator<sp/>of<sp/>the<sp/>server<sp/>Bob<sp/>is<sp/>connected<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Admin(</highlight><highlight class="stringliteral">&quot;Bob&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a5704c344c8fb235e34fc789d19e056d2" kindref="member">Listener.OnAdmin</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1710" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1709" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a848ef42757a3bee2171122904ebfc78b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Lusers</definition>
        <argsstring>()</argsstring>
        <name>Lusers</name>
        <briefdescription>
<para>Request statistics about the size of the IRC network. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a9adf99ef98b9af317ffc37594ddb6827" kindref="member">Listener.OnLusers</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1736" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1735" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1aa45aca6427916d327904a8e2fbb9c01a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Lusers</definition>
        <argsstring>(string hostMask, string targetServer)</argsstring>
        <name>Lusers</name>
        <param>
          <type>string</type>
          <declname>hostMask</declname>
        </param>
        <param>
          <type>string</type>
          <declname>targetServer</declname>
        </param>
        <briefdescription>
<para>Request statistics about the size of the IRC network. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Limits the kinds of servers included in the response by specifiying a hostname string. Can include wildcards.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetServer</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the server that should process the request. Can be null to indicate that the current server should handle the request. Can include wildcards.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Request<sp/>stats<sp/>from<sp/>the<sp/>current<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Lusers();</highlight></codeline>
<codeline><highlight class="normal">Request<sp/>stats<sp/>about<sp/>all<sp/>servers<sp/>ending<sp/>in<sp/></highlight><highlight class="stringliteral">&apos;.net&apos;</highlight><highlight class="normal"><sp/>from<sp/>the<sp/>current<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Lusers(</highlight><highlight class="stringliteral">&quot;*.net&quot;</highlight><highlight class="normal">,<sp/>null<sp/>);</highlight></codeline>
<codeline><highlight class="normal">Request<sp/>stats<sp/>about<sp/>all<sp/>servers<sp/>ending<sp/>in<sp/></highlight><highlight class="stringliteral">&apos;.net&apos;</highlight><highlight class="normal"><sp/>from<sp/></highlight><highlight class="stringliteral">&apos;west.gamesnet.net&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Lusers(</highlight><highlight class="stringliteral">&quot;*.net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;west.gamesnet.net&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the host mask and server names are too long.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a9adf99ef98b9af317ffc37594ddb6827" kindref="member">Listener.OnLusers</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1764" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1763" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a267266aa471ebabcb2928a88a1f5e2de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Links</definition>
        <argsstring>()</argsstring>
        <name>Links</name>
        <briefdescription>
<para>Request all server names which are known by the current server. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1ae8686644d020df7bf65dce7061a915e0" kindref="member">Listener.OnLinks</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1800" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1799" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a7001b9f5788ba89d4f60402351e184cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Links</definition>
        <argsstring>(params string[] masks)</argsstring>
        <name>Links</name>
        <param>
          <type>params string[]</type>
          <declname>masks</declname>
        </param>
        <briefdescription>
<para>Request all server names which are known by the target server and which match a given host mask. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>masks</parametername>
</parameternamelist>
<parameterdescription>
<para>Either a single string which acts as a host mask filter for the query. Or two strings with the first as host mask and the second a target server. Any other arguments will be ignored.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Request<sp/>names<sp/>from<sp/>the<sp/>current<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Links();</highlight></codeline>
<codeline><highlight class="normal">Request<sp/>names<sp/>of<sp/>all<sp/>servers<sp/>ending<sp/>in<sp/></highlight><highlight class="stringliteral">&apos;.net&apos;</highlight><highlight class="normal"><sp/>from<sp/>the<sp/>current<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Links(</highlight><highlight class="stringliteral">&quot;*.edu&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal">Request<sp/>names<sp/>of<sp/>all<sp/>servers<sp/>ending<sp/>in<sp/></highlight><highlight class="stringliteral">&apos;.edu&apos;</highlight><highlight class="normal"><sp/>from<sp/></highlight><highlight class="stringliteral">&apos;*.gnome.org&apos;</highlight><highlight class="normal"><sp/>servers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Links(</highlight><highlight class="stringliteral">&quot;*.edu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;*.gnome.org&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the masks are too long.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1ae8686644d020df7bf65dce7061a915e0" kindref="member">Listener.OnLinks</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1828" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1827" bodyend="1851"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1ab3d82bbe5ec355db634e4d20f7c29f61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Stats</definition>
        <argsstring>(StatsQuery query)</argsstring>
        <name>Stats</name>
        <param>
          <type><ref refid="namespace_alaris_1_1_irc_1a9f6abfba40ff3ff6022a489b9841244f" kindref="member">StatsQuery</ref></type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Request certain kinds of statistics about the current server. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of query to send. See <ref refid="namespace_alaris_1_1_irc_1a9f6abfba40ff3ff6022a489b9841244f" kindref="member">StatsQuery</ref> for choice.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Request<sp/>server<sp/>link<sp/>stats</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Stats(<sp/><ref refid="namespace_alaris_1_1_irc_1a9f6abfba40ff3ff6022a489b9841244f" kindref="member" tooltip="The possible stats message query parameters.">StatsQuery</ref>.Connections<sp/>);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a75de4cf52b25903063f43cb1948884d0" kindref="member">Listener.OnStats</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1870" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1869" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a4442a8ed1484886d83acc9aadabe474c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Stats</definition>
        <argsstring>(StatsQuery query, string targetServer)</argsstring>
        <name>Stats</name>
        <param>
          <type><ref refid="namespace_alaris_1_1_irc_1a9f6abfba40ff3ff6022a489b9841244f" kindref="member">StatsQuery</ref></type>
          <declname>query</declname>
        </param>
        <param>
          <type>string</type>
          <declname>targetServer</declname>
        </param>
        <briefdescription>
<para>Request certain kinds of statistics about the current server. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOSUCHSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of query to send. See <ref refid="namespace_alaris_1_1_irc_1a9f6abfba40ff3ff6022a489b9841244f" kindref="member">StatsQuery</ref> for choice.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetServer</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the server that should process the request. Can include wildcards.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Request<sp/>list<sp/>of<sp/>Operators<sp/>from<sp/>the<sp/>server<sp/></highlight><highlight class="stringliteral">&apos;irc.gnome.org&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.Stats(<sp/><ref refid="namespace_alaris_1_1_irc_1a9f6abfba40ff3ff6022a489b9841244f" kindref="member" tooltip="The possible stats message query parameters.">StatsQuery</ref>.Operators,<sp/></highlight><highlight class="stringliteral">&quot;irc.gnome.org&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the target server name is too long.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a75de4cf52b25903063f43cb1948884d0" kindref="member">Listener.OnStats</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1892" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1891" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="class_alaris_1_1_irc_1_1_sender_1a309ed449989305b5b913ff43ddada31a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alaris.Irc.Sender.Kill</definition>
        <argsstring>(string nick, string reason)</argsstring>
        <name>Kill</name>
        <param>
          <type>string</type>
          <declname>nick</declname>
        </param>
        <param>
          <type>string</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Forcefully disconnect a user form the IRC server. This can only be used by Operators. </para>        </briefdescription>
        <detaileddescription>
<para>Possible Errors <itemizedlist>
<listitem>
<para>ERR_NOPRIVILEGES </para></listitem>
<listitem>
<para>ERR_NEEDMOREPARAMS </para></listitem>
<listitem>
<para>ERR_NOSUCHNICK </para></listitem>
<listitem>
<para>ERR_CANTKILLSERVER </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>User to kill</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason for disconnecting the user.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>If the nick is not valid or the reason is null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_alaris_1_1_irc_1_1_listener_1a2d1443b8e112e100ca50716ee1a11323" kindref="member">Listener.OnKill</ref></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="1930" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="1929" bodyend="1958"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is used to send all the IRC commands except for CTCP and DCC messages. Instances of this class are retrieved as properties of the <ref refid="class_alaris_1_1_irc_1_1_connection" kindref="compound">Connection</ref> object. All methods in this class are thread safe. </para>    </briefdescription>
    <detaileddescription>
<para>Due to the asynchronous nature of IRC, none of these commands have a return value. To get that value (or possibly an error) the client must handle the corresponding event. For example, to check if a user is online the client would send <ref refid="class_alaris_1_1_irc_1_1_sender_1a4846350dcbef45055452a70d801e10bf" kindref="member">Sender.Ison</ref> then check the value of the <ref refid="class_alaris_1_1_irc_1_1_listener_1a8cc017d23b18674a50e406132275920c" kindref="member">Listener.OnIson</ref> event to receive the answer.</para><para>When a command can return an error, the possible error replies are listed. An error message will be sent via the <ref refid="class_alaris_1_1_irc_1_1_listener_1acb02613cb07d203fc14baa385b42a479" kindref="member">Listener.OnError</ref> event with one of the listed error codes as a parameter. When checking for these errors use the constants from <ref refid="namespace_alaris_1_1_irc_1ad1f518153523cd3dd273f4fe36ae7b96" kindref="member">ReplyCode</ref>. </para><para>The maximum length of any command string sent to the server is 512 characters.</para><para><programlisting><codeline><highlight class="normal">Create<sp/>a<sp/>Connection<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>which<sp/>will<sp/>automatically<sp/>create<sp/>its<sp/>own<sp/>Sender</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Connection<sp/>connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Connection(<sp/>args,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">Send<sp/>commands<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>the<sp/>Connection<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>and<sp/>its<sp/>Sender<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal">No<sp/>need<sp/>to<sp/>keep<sp/>a<sp/>separate<sp/>reference<sp/>to<sp/>the<sp/>Sender<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection.Sender.PublicMessage(</highlight><highlight class="stringliteral">&quot;#thresher&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>    </detaileddescription>
    <inheritancegraph>
      <node id="868">
        <label>Alaris.Irc.Sender</label>
        <link refid="class_alaris_1_1_irc_1_1_sender"/>
        <childnode refid="869" relation="public-inheritance">
        </childnode>
      </node>
      <node id="869">
        <label>Alaris.Irc.CommandBuilder</label>
        <link refid="class_alaris_1_1_irc_1_1_command_builder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="870">
        <label>Alaris.Irc.Sender</label>
        <link refid="class_alaris_1_1_irc_1_1_sender"/>
        <childnode refid="871" relation="public-inheritance">
        </childnode>
      </node>
      <node id="873">
        <label>Alaris.Irc.Ctcp.CtcpListener</label>
        <link refid="class_alaris_1_1_irc_1_1_ctcp_1_1_ctcp_listener"/>
        <childnode refid="872" relation="usage">
          <edgelabel>_connection</edgelabel>
        </childnode>
      </node>
      <node id="877">
        <label>Alaris.Irc.ServerProperties</label>
        <link refid="class_alaris_1_1_irc_1_1_server_properties"/>
      </node>
      <node id="874">
        <label>Alaris.Irc.Ctcp.CtcpSender</label>
        <link refid="class_alaris_1_1_irc_1_1_ctcp_1_1_ctcp_sender"/>
        <childnode refid="871" relation="public-inheritance">
        </childnode>
      </node>
      <node id="871">
        <label>Alaris.Irc.CommandBuilder</label>
        <link refid="class_alaris_1_1_irc_1_1_command_builder"/>
        <childnode refid="872" relation="usage">
          <edgelabel>connection</edgelabel>
        </childnode>
      </node>
      <node id="876">
        <label>Alaris.Irc.Ctcp.CtcpResponder</label>
        <link refid="class_alaris_1_1_irc_1_1_ctcp_1_1_ctcp_responder"/>
        <childnode refid="872" relation="usage">
          <edgelabel>connection</edgelabel>
        </childnode>
      </node>
      <node id="872">
        <label>Alaris.Irc.Connection</label>
        <link refid="class_alaris_1_1_irc_1_1_connection"/>
        <childnode refid="873" relation="usage">
          <edgelabel>ctcpListener</edgelabel>
        </childnode>
        <childnode refid="874" relation="usage">
          <edgelabel>ctcpSender</edgelabel>
        </childnode>
        <childnode refid="875" relation="usage">
          <edgelabel>listener</edgelabel>
        </childnode>
        <childnode refid="876" relation="usage">
          <edgelabel>ctcpResponder</edgelabel>
        </childnode>
        <childnode refid="877" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
        <childnode refid="878" relation="usage">
          <edgelabel>connectionArgs</edgelabel>
        </childnode>
        <childnode refid="870" relation="usage">
          <edgelabel>sender</edgelabel>
        </childnode>
      </node>
      <node id="878">
        <label>Alaris.Irc.ConnectionArgs</label>
        <link refid="struct_alaris_1_1_irc_1_1_connection_args"/>
      </node>
      <node id="875">
        <label>Alaris.Irc.Listener</label>
        <link refid="class_alaris_1_1_irc_1_1_listener"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" line="34" bodyfile="C:/Users/Twl/Documents/Visual Studio 2010/Projects/Alaris/irc/Sender.cs" bodystart="33" bodyend="1960"/>
    <listofallmembers>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ab4dd7f6e2b2e764a8883c3e8a8e399a6" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Action</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a879bd90bdca103f95822876ae2fef57f" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Admin</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1aa03cea81188c91971c2b426b2182b136" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Admin</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a1e4e590dee0e25277811faced0a757fd" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>AllList</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a0a71792c41246c471b7867930df5ac84" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>AllNames</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a4c3c302a961fdb071aa36fd43418c391" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>AllWho</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a8d97d09395a73ad57e7333cd9c2bcfb1" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Away</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a1c89fd00a1636b403ca1873b536087f1" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>ChangeChannelMode</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ae9a97b3cae981bc5b8b40e95cc5e46ce" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>ChangeTopic</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1aa028e9126ff45c91768cbe3bee139bd4" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>ChangeUserMode</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1aae0268c81ac4f4f1aa6321d59cf8c593" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>ClearTopic</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ad806ab2829530ff482aa4dc17799eed2" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Info</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a63b302f80042b9f189425b4f328d205f" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Info</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a39a5e0a31a8ad5040dac0a80ede013bc" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Invite</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ac979d937b7cae34f6d0bf48c9b03d3d2" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>IsEmpty</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a4846350dcbef45055452a70d801e10bf" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Ison</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a0cdb38a95694edcae4500b686a0a70a2" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Join</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a293889b8ee12f71b15472b85a6aec6c2" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Join</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ac012d909b8da3fe4cf9823b34519e804" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Kick</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a309ed449989305b5b913ff43ddada31a" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Kill</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a267266aa471ebabcb2928a88a1f5e2de" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Links</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a7001b9f5788ba89d4f60402351e184cd" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Links</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a27569ab2bf3ba092bae3b93819442414" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>List</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a848ef42757a3bee2171122904ebfc78b" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Lusers</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1aa45aca6427916d327904a8e2fbb9c01a" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Lusers</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1abf4a375ed7f5a14dc247e58f11da5113" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Motd</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1afa4e8050c0099ea2feb2ffa5f4c999d7" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Motd</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1abca5d383bc7ea100e48ca2a977d40519" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Names</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ae527d174522ced38ea86819570db0805" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Nick</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ae63cc7939ee0fd6c2c893cb21a79811d" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>NickServ</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a926b4ae646ec8e0488e21a71770344f6" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>NickServRegister</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ac02a347773de2cbd05e9e4cc76feef21" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Part</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a00d2d9ef8ab0a00c32f2664bc54cc45b" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Part</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1afc13bc3b749efbbde27ad48a6334d07d" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Pass</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1aa972a477bd9aa9ee87da7762f9694afa" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Pong</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ae5d728129206ae200adbfbf32241c16f" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>PrivateAction</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a147245ec478460816364efbd4603cffc" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>PrivateMessage</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a422ab65376c0d5c245609f88a3d6924b" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>PrivateNotice</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1abb1d26ba86b3cebe8b36a2ca49b4c566" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>PublicMessage</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ad9b90ba47ef2282365e571a7682dceac" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>PublicNotice</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a1e58a119edd1aef579a1d8fc71729ec1" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Quit</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a70f14aa3490c1a2be0931cc43d6acad9" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Raw</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a0465a1de558209924eeebd2581fc7fcc" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Register</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ae770eae16d473393d2878a92d28b53f0" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>RegisterConnection</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ab7f4751bb6b94759bcc96a531fe294d3" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>RequestChannelList</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a70c8ffb3099d7e490e992b10e74dd32d" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>RequestChannelModes</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a8a9e10225e39f020b5d0cc0b0d4bad11" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>RequestTopic</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1aa02228d0bcad8d431ba5205b9dfb52e9" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>RequestUserModes</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ab5e09d85e98b5a75166b535826c64af8" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Sender</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ab3d82bbe5ec355db634e4d20f7c29f61" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Stats</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a4442a8ed1484886d83acc9aadabe474c" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Stats</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a97d294668ccb353b709a099d3f939dc1" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Time</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ab3b9f3bf2f050e5428da2662f82c1caf" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Time</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1ae90dc167ebeaa270455aec34f3a9af88" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>TooLong</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a575171691c166410eaa82be2a602ced8" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Truncate</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1acc3dc4808321ad9e390a477fc8ad4a32" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>UnAway</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a30017f33b6acc39333b56fe98bb49963" prot="private" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>User</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a1ec10168e7129cfe8c421e6d453557bc" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Version</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a57f756e3acf1a393b0d0b4b414f0b358" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Version</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a0b085b6869e29372ac4c9b5db0673dab" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Wallops</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1abb63c22961cb67dda3be4a7390da895d" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Who</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a1118f695bdbd74a6353e279803f2bbd6" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Whois</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1a83ce223f3a0ba0b22bab4ac72d61ce76" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Whowas</name></member>
      <member refid="class_alaris_1_1_irc_1_1_sender_1abbf23702f63274e30f9a5077d5dcde8a" prot="public" virt="non-virtual"><scope>Alaris::Irc::Sender</scope><name>Whowas</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
