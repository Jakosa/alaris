.TH "Alaris::Irc::Rfc2812Util" 3 "25 May 2010" "Version 1.6" "Alaris IRC Bot" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Alaris::Irc::Rfc2812Util \- 
.PP
RFC 2812 Utility methods.  

.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBUserInfo\fP \fBUserInfoFromString\fP (string fullUserName)"
.br
.RI "\fIConverts the user string sent by the IRC server into a \fBUserInfo\fP object. \fP"
.ti -1c
.RI "static string[] \fBParseUserInfoLine\fP (string fullUserName)"
.br
.RI "\fIBreak up an IRC user string into its component parts. \fP"
.ti -1c
.RI "static bool \fBIsValidChannelList\fP (string[] channels)"
.br
.RI "\fIUsing the rules set forth in RFC 2812 determine if an array of channel names is valid. \fP"
.ti -1c
.RI "static bool \fBIsValidChannelName\fP (string channel)"
.br
.RI "\fIUsing the rules set forth in RFC 2812 determine if the channel name is valid. \fP"
.ti -1c
.RI "static bool \fBIsValidNick\fP (string nick)"
.br
.RI "\fIUsing the rules set forth in RFC 2812 determine if the nickname is valid. \fP"
.ti -1c
.RI "static bool \fBIsValidEmailAddress\fP (string email)"
.br
.RI "\fICheck if whether the provided e-mail address is considered valid. \fP"
.ti -1c
.RI "static bool \fBIsValidNicklList\fP (string[] nicks)"
.br
.RI "\fIUsing the rules set forth in RFC 2812 determine if an array of nicknames names is valid. \fP"
.ti -1c
.RI "static char \fBModeActionToChar\fP (\fBModeAction\fP action)"
.br
.RI "\fIConvert a ModeAction into its RFC2812 character. \fP"
.ti -1c
.RI "static \fBModeAction\fP \fBCharToModeAction\fP (char action)"
.br
.RI "\fIConverts the char received from the IRC server into its enum equivalent. \fP"
.ti -1c
.RI "static char \fBUserModeToChar\fP (\fBUserMode\fP mode)"
.br
.RI "\fIConverts a UserMode into its RFC2812 character. \fP"
.ti -1c
.RI "static \fBUserMode\fP[] \fBUserModesToArray\fP (string modes)"
.br
.RI "\fIConvert a string of UserModes characters to an array of UserMode enums. \fP"
.ti -1c
.RI "static \fBUserMode\fP \fBCharToUserMode\fP (char mode)"
.br
.RI "\fIConverts the char recived from the IRC server into its enum equivalent. \fP"
.ti -1c
.RI "static \fBChannelMode\fP[] \fBChannelModesToArray\fP (string modes)"
.br
.RI "\fIConvert a string of ChannelModes characters to an array of ChannelMode enums. \fP"
.ti -1c
.RI "static char \fBChannelModeToChar\fP (\fBChannelMode\fP mode)"
.br
.RI "\fIConverts a ChannelMode into its RFC2812 character. \fP"
.ti -1c
.RI "static \fBChannelMode\fP \fBCharToChannelMode\fP (char mode)"
.br
.RI "\fIConverts the char recived from the IRC server into its enum equivalent. \fP"
.ti -1c
.RI "static char \fBStatsQueryToChar\fP (\fBStatsQuery\fP query)"
.br
.RI "\fIConverts a StatQuery enum value to its RFC2812 character. \fP"
.ti -1c
.RI "static \fBStatsQuery\fP \fBCharToStatsQuery\fP (char queryType)"
.br
.RI "\fIConverts the char recived from the IRC server into its enum equivalent. \fP"
.in -1c
.SH "Detailed Description"
.PP 
RFC 2812 Utility methods. 


.SH "Member Function Documentation"
.PP 
.SS "static \fBChannelMode\fP [] Alaris.Irc.Rfc2812Util.ChannelModesToArray (string modes)\fC [static]\fP"
.PP
Convert a string of ChannelModes characters to an array of ChannelMode enums. \fBParameters:\fP
.RS 4
\fImodes\fP A string of ChannelMode chars from the IRC server.
.RE
.PP
\fBReturns:\fP
.RS 4
An array of ChannelMode enums. Charactres that are not from RFC2812 will be droppped.
.RE
.PP

.SS "static char Alaris.Irc.Rfc2812Util.ChannelModeToChar (\fBChannelMode\fP mode)\fC [static]\fP"
.PP
Converts a ChannelMode into its RFC2812 character. \fBParameters:\fP
.RS 4
\fImode\fP The mode enum.
.RE
.PP
\fBReturns:\fP
.RS 4
The corresponding char.
.RE
.PP

.SS "static \fBChannelMode\fP Alaris.Irc.Rfc2812Util.CharToChannelMode (char mode)\fC [static]\fP"
.PP
Converts the char recived from the IRC server into its enum equivalent. \fBParameters:\fP
.RS 4
\fImode\fP One of the IRC mode characters, e.g. 'O','i', etc...
.RE
.PP
\fBReturns:\fP
.RS 4
An mode enum.
.RE
.PP

.SS "static \fBModeAction\fP Alaris.Irc.Rfc2812Util.CharToModeAction (char action)\fC [static]\fP"
.PP
Converts the char received from the IRC server into its enum equivalent. \fBParameters:\fP
.RS 4
\fIaction\fP Either '+' or '-'.
.RE
.PP
\fBReturns:\fP
.RS 4
An action enum.
.RE
.PP

.SS "static \fBStatsQuery\fP Alaris.Irc.Rfc2812Util.CharToStatsQuery (char queryType)\fC [static]\fP"
.PP
Converts the char recived from the IRC server into its enum equivalent. \fBParameters:\fP
.RS 4
\fIqueryType\fP One of the IRC stats query characters, e.g. 'u','l', etc...
.RE
.PP
\fBReturns:\fP
.RS 4
An StatsQuery enum.
.RE
.PP

.SS "static \fBUserMode\fP Alaris.Irc.Rfc2812Util.CharToUserMode (char mode)\fC [static]\fP"
.PP
Converts the char recived from the IRC server into its enum equivalent. \fBParameters:\fP
.RS 4
\fImode\fP One of the IRC mode characters, e.g. 'a','i', etc...
.RE
.PP
\fBReturns:\fP
.RS 4
An mode enum.
.RE
.PP

.SS "static bool Alaris.Irc.Rfc2812Util.IsValidChannelList (string[] channels)\fC [static]\fP"
.PP
Using the rules set forth in RFC 2812 determine if an array of channel names is valid. \fBReturns:\fP
.RS 4
True if the channel names are all valid.
.RE
.PP

.SS "static bool Alaris.Irc.Rfc2812Util.IsValidChannelName (string channel)\fC [static]\fP"
.PP
Using the rules set forth in RFC 2812 determine if the channel name is valid. \fBReturns:\fP
.RS 4
True if the channel name is valid.
.RE
.PP

.SS "static bool Alaris.Irc.Rfc2812Util.IsValidEmailAddress (string email)\fC [static]\fP"
.PP
Check if whether the provided e-mail address is considered valid. \fBParameters:\fP
.RS 4
\fIemail\fP The e-mail address to check. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if valid, otherwise False. 
.RE
.PP

.SS "static bool Alaris.Irc.Rfc2812Util.IsValidNick (string nick)\fC [static]\fP"
.PP
Using the rules set forth in RFC 2812 determine if the nickname is valid. \fBReturns:\fP
.RS 4
True is the nickname is valid
.RE
.PP

.SS "static bool Alaris.Irc.Rfc2812Util.IsValidNicklList (string[] nicks)\fC [static]\fP"
.PP
Using the rules set forth in RFC 2812 determine if an array of nicknames names is valid. \fBReturns:\fP
.RS 4
True if the channel names are all valid.
.RE
.PP

.SS "static char Alaris.Irc.Rfc2812Util.ModeActionToChar (\fBModeAction\fP action)\fC [static]\fP"
.PP
Convert a ModeAction into its RFC2812 character. \fBParameters:\fP
.RS 4
\fIaction\fP The action enum.
.RE
.PP
\fBReturns:\fP
.RS 4
Either '+' or '-'.
.RE
.PP

.SS "static string [] Alaris.Irc.Rfc2812Util.ParseUserInfoLine (string fullUserName)\fC [static]\fP"
.PP
Break up an IRC user string into its component parts. \fBParameters:\fP
.RS 4
\fIfullUserName\fP The user in nick!user form
.RE
.PP
\fBReturns:\fP
.RS 4
A string array with the first item being nick, then user, and then host.
.RE
.PP

.SS "static char Alaris.Irc.Rfc2812Util.StatsQueryToChar (\fBStatsQuery\fP query)\fC [static]\fP"
.PP
Converts a StatQuery enum value to its RFC2812 character. \fBParameters:\fP
.RS 4
\fIquery\fP The query enum.
.RE
.PP
\fBReturns:\fP
.RS 4
The corresponding char.
.RE
.PP

.SS "static \fBUserInfo\fP Alaris.Irc.Rfc2812Util.UserInfoFromString (string fullUserName)\fC [static]\fP"
.PP
Converts the user string sent by the IRC server into a \fBUserInfo\fP object. \fBParameters:\fP
.RS 4
\fIfullUserName\fP The user in nick!user form.
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBUserInfo\fP object.
.RE
.PP

.SS "static \fBUserMode\fP [] Alaris.Irc.Rfc2812Util.UserModesToArray (string modes)\fC [static]\fP"
.PP
Convert a string of UserModes characters to an array of UserMode enums. \fBParameters:\fP
.RS 4
\fImodes\fP A string of UserMode chars from the IRC server.
.RE
.PP
\fBReturns:\fP
.RS 4
An array of UserMode enums. Charactres that are not from RFC2812 will be droppped.
.RE
.PP

.SS "static char Alaris.Irc.Rfc2812Util.UserModeToChar (\fBUserMode\fP mode)\fC [static]\fP"
.PP
Converts a UserMode into its RFC2812 character. \fBParameters:\fP
.RS 4
\fImode\fP The mode enum.
.RE
.PP
\fBReturns:\fP
.RS 4
The corresponding char.
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Alaris IRC Bot from the source code.
