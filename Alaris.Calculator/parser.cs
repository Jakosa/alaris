/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using Alaris.Calculator.node;
using Alaris.Calculator.lexer;
using Alaris.Calculator.analysis;

namespace Alaris.Calculator.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTNumber(TNumber node)
    {
        index = 0;
    }

    public override void CaseTAdd(TAdd node)
    {
        index = 1;
    }

    public override void CaseTSub(TSub node)
    {
        index = 2;
    }

    public override void CaseTMul(TMul node)
    {
        index = 3;
    }

    public override void CaseTDiv(TDiv node)
    {
        index = 4;
    }

    public override void CaseTMod(TMod node)
    {
        index = 5;
    }

    public override void CaseTPow(TPow node)
    {
        index = 6;
    }

    public override void CaseTSqrt(TSqrt node)
    {
        index = 7;
    }

    public override void CaseTCos(TCos node)
    {
        index = 8;
    }

    public override void CaseTCosh(TCosh node)
    {
        index = 9;
    }

    public override void CaseTAcos(TAcos node)
    {
        index = 10;
    }

    public override void CaseTSin(TSin node)
    {
        index = 11;
    }

    public override void CaseTSinh(TSinh node)
    {
        index = 12;
    }

    public override void CaseTAsin(TAsin node)
    {
        index = 13;
    }

    public override void CaseTTan(TTan node)
    {
        index = 14;
    }

    public override void CaseTAtan(TAtan node)
    {
        index = 15;
    }

    public override void CaseTAtan2(TAtan2 node)
    {
        index = 16;
    }

    public override void CaseTTanh(TTanh node)
    {
        index = 17;
    }

    public override void CaseTAbs(TAbs node)
    {
        index = 18;
    }

    public override void CaseTLparen(TLparen node)
    {
        index = 19;
    }

    public override void CaseTRparen(TRparen node)
    {
        index = 20;
    }

    public override void CaseEOF(EOF node)
    {
        index = 21;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(0), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(0), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(1), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(1), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(1), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(1), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(1), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(2), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(2), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(2), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(2), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(2), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(2), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(2), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(2), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(2), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(2), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(2), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(2), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(2), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(2), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(3), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(3), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PExp node1 = (PExp) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList1[0];
        PExp pexpNode3 = (PExp)nodeArrayList3[0];
        AAddExp pexpNode1 = new AAddExp (
              pexpNode2,
              pexpNode3
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList1[0];
        PExp pexpNode3 = (PExp)nodeArrayList3[0];
        ASubExp pexpNode1 = new ASubExp (
              pexpNode2,
              pexpNode3
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode1 = (PExp)nodeArrayList1[0];
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList1[0];
        PExp pexpNode3 = (PExp)nodeArrayList3[0];
        AMulExp pexpNode1 = new AMulExp (
              pexpNode2,
              pexpNode3
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList1[0];
        PExp pexpNode3 = (PExp)nodeArrayList3[0];
        ADivExp pexpNode1 = new ADivExp (
              pexpNode2,
              pexpNode3
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList1[0];
        PExp pexpNode3 = (PExp)nodeArrayList3[0];
        AModExp pexpNode1 = new AModExp (
              pexpNode2,
              pexpNode3
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList1[0];
        PExp pexpNode3 = (PExp)nodeArrayList3[0];
        APowExp pexpNode1 = new APowExp (
              pexpNode2,
              pexpNode3
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode1 = (PExp)nodeArrayList1[0];
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNumber tnumberNode2 = (TNumber)nodeArrayList1[0];
        ANumberExp pexpNode1 = new ANumberExp (
              tnumberNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        AAbsExp pexpNode1 = new AAbsExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        ASqrtExp pexpNode1 = new ASqrtExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        ACosExp pexpNode1 = new ACosExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        AAcosExp pexpNode1 = new AAcosExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        ACoshExp pexpNode1 = new ACoshExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        ASinExp pexpNode1 = new ASinExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        AAsinExp pexpNode1 = new AAsinExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        ASinhExp pexpNode1 = new ASinhExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList2[0];
        AParenExp pexpNode1 = new AParenExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        ATanExp pexpNode1 = new ATanExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        ATanhExp pexpNode1 = new ATanhExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        AAtanExp pexpNode1 = new AAtanExp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExp pexpNode2 = (PExp)nodeArrayList3[0];
        AAtan2Exp pexpNode1 = new AAtan2Exp (
              pexpNode2
        );
        nodeList.Add(pexpNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PExp pexpNode1 = (PExp)nodeArrayList1[0];
        if ( pexpNode1 != null )
        {
            listNode2.Add(pexpNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        PExp pexpNode1 = (PExp)nodeArrayList1[0];
        TypedList listNode2 = (TypedList)nodeArrayList2[0];
        if ( pexpNode1 != null )
        {
            listNode3.Add(pexpNode1);
        }
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 3, 0},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {19, 0, 18},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {19, 0, 19},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {19, 0, 20},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {19, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {19, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {19, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {19, 0, 24},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {19, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {19, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {19, 0, 28},
      },
      new int[][] {
        new int[] {-1, 3, 13},
        new int[] {19, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 15},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {21, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {3, 0, 33},
        new int[] {4, 0, 34},
        new int[] {5, 0, 35},
        new int[] {6, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 26},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 27},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 36},
        new int[] {0, 0, 1},
        new int[] {7, 0, 2},
        new int[] {8, 0, 3},
        new int[] {9, 0, 4},
        new int[] {10, 0, 5},
        new int[] {11, 0, 6},
        new int[] {12, 0, 7},
        new int[] {13, 0, 8},
        new int[] {14, 0, 9},
        new int[] {15, 0, 10},
        new int[] {16, 0, 11},
        new int[] {17, 0, 12},
        new int[] {18, 0, 13},
        new int[] {19, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 56},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 57},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 58},
      },
      new int[][] {
        new int[] {-1, 3, 40},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 41},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 60},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 61},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 62},
      },
      new int[][] {
        new int[] {-1, 3, 44},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 63},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 65},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 66},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {1, 0, 31},
        new int[] {2, 0, 32},
        new int[] {20, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 1, 0},
        new int[] {3, 0, 33},
        new int[] {4, 0, 34},
        new int[] {5, 0, 35},
        new int[] {6, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 1},
        new int[] {3, 0, 33},
        new int[] {4, 0, 34},
        new int[] {5, 0, 35},
        new int[] {6, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 15},
        new int[] {14, 30},
        new int[] {18, 37},
        new int[] {19, 38},
        new int[] {20, 39},
        new int[] {21, 40},
        new int[] {22, 41},
        new int[] {23, 42},
        new int[] {24, 43},
        new int[] {25, 44},
        new int[] {26, 45},
        new int[] {27, 46},
        new int[] {28, 47},
        new int[] {29, 48},
      },
      new int[][] {
        new int[] {-1, 16},
        new int[] {31, 50},
        new int[] {32, 51},
      },
      new int[][] {
        new int[] {-1, 17},
        new int[] {33, 52},
        new int[] {34, 53},
        new int[] {35, 54},
        new int[] {36, 55},
      },
      new int[][] {
        new int[] {-1, -1},
      },
    };

    private static String[] errorMessages = {
      "expecting: number, 'sqrt', 'cos', 'cosh', 'acos', 'sin', 'sinh', 'asin', 'tan', 'atan', 'atan2', 'tanh', 'abs', '('",
      "expecting: '+', '-', '*', '/', '%', '^', ')', EOF",
      "expecting: '('",
      "expecting: '+', '-', EOF",
      "expecting: '+', '-', ')'",
    };

    private static int[] errors = {
      0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 
      1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 
      0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
      4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1, 
    };
}
}
