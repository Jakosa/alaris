/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Alaris.Calculator.analysis;

namespace Alaris.Calculator.node {

public abstract class PExp : Node
{
}


public sealed class AAddExp : PExp
{
    private PExp _left_;
    private PExp _right_;

    public AAddExp ()
    {
    }

    public AAddExp (
            PExp _left_,
            PExp _right_
    )
    {
        SetLeft (_left_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AAddExp (
            (PExp)CloneNode (_left_),
            (PExp)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExp(this);
    }

    public PExp GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PExp GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp) newChild);
            return;
        }
    }

}
public sealed class ASubExp : PExp
{
    private PExp _left_;
    private PExp _right_;

    public ASubExp ()
    {
    }

    public ASubExp (
            PExp _left_,
            PExp _right_
    )
    {
        SetLeft (_left_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ASubExp (
            (PExp)CloneNode (_left_),
            (PExp)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubExp(this);
    }

    public PExp GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PExp GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMulExp : PExp
{
    private PExp _left_;
    private PExp _right_;

    public AMulExp ()
    {
    }

    public AMulExp (
            PExp _left_,
            PExp _right_
    )
    {
        SetLeft (_left_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AMulExp (
            (PExp)CloneNode (_left_),
            (PExp)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMulExp(this);
    }

    public PExp GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PExp GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp) newChild);
            return;
        }
    }

}
public sealed class ADivExp : PExp
{
    private PExp _left_;
    private PExp _right_;

    public ADivExp ()
    {
    }

    public ADivExp (
            PExp _left_,
            PExp _right_
    )
    {
        SetLeft (_left_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ADivExp (
            (PExp)CloneNode (_left_),
            (PExp)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivExp(this);
    }

    public PExp GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PExp GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp) newChild);
            return;
        }
    }

}
public sealed class AModExp : PExp
{
    private PExp _left_;
    private PExp _right_;

    public AModExp ()
    {
    }

    public AModExp (
            PExp _left_,
            PExp _right_
    )
    {
        SetLeft (_left_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AModExp (
            (PExp)CloneNode (_left_),
            (PExp)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModExp(this);
    }

    public PExp GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PExp GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp) newChild);
            return;
        }
    }

}
public sealed class APowExp : PExp
{
    private PExp _left_;
    private PExp _right_;

    public APowExp ()
    {
    }

    public APowExp (
            PExp _left_,
            PExp _right_
    )
    {
        SetLeft (_left_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new APowExp (
            (PExp)CloneNode (_left_),
            (PExp)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPowExp(this);
    }

    public PExp GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PExp GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp) newChild);
            return;
        }
    }

}
public sealed class AParenExp : PExp
{
    private PExp _exp_;

    public AParenExp ()
    {
    }

    public AParenExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AParenExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ASqrtExp : PExp
{
    private PExp _exp_;

    public ASqrtExp ()
    {
    }

    public ASqrtExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ASqrtExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASqrtExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ACosExp : PExp
{
    private PExp _exp_;

    public ACosExp ()
    {
    }

    public ACosExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ACosExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACosExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAcosExp : PExp
{
    private PExp _exp_;

    public AAcosExp ()
    {
    }

    public AAcosExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAcosExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAcosExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ACoshExp : PExp
{
    private PExp _exp_;

    public ACoshExp ()
    {
    }

    public ACoshExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ACoshExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACoshExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ASinExp : PExp
{
    private PExp _exp_;

    public ASinExp ()
    {
    }

    public ASinExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ASinExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASinExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAsinExp : PExp
{
    private PExp _exp_;

    public AAsinExp ()
    {
    }

    public AAsinExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAsinExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAsinExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ASinhExp : PExp
{
    private PExp _exp_;

    public ASinhExp ()
    {
    }

    public ASinhExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ASinhExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASinhExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ATanExp : PExp
{
    private PExp _exp_;

    public ATanExp ()
    {
    }

    public ATanExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ATanExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATanExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ATanhExp : PExp
{
    private PExp _exp_;

    public ATanhExp ()
    {
    }

    public ATanhExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ATanhExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATanhExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAtanExp : PExp
{
    private PExp _exp_;

    public AAtanExp ()
    {
    }

    public AAtanExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAtanExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAtanExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAtan2Exp : PExp
{
    private PExp _exp_;

    public AAtan2Exp ()
    {
    }

    public AAtan2Exp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAtan2Exp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAtan2Exp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAbsExp : PExp
{
    private PExp _exp_;

    public AAbsExp ()
    {
    }

    public AAbsExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAbsExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAbsExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ANumberExp : PExp
{
    private TNumber _number_;

    public ANumberExp ()
    {
    }

    public ANumberExp (
            TNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new ANumberExp (
            (TNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberExp(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PExp _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PExp _base_,
        EOF _eof_)
    {
        SetPExp(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PExp) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PExp GetPExp()
    {
        return _base_;
    }
    public void SetPExp(PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPExp((PExp) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
