Package Alaris.Calculator;

Helpers
	digit			= ['0' .. '9'];

Tokens
	number			= (digit+ | digit+ '.' digit+);
	add			= '+';
	sub			= '-';
	mul			= '*';
	div			= '/';
	mod			= '%';
	pow			= '^';
	sqrt			= 'sqrt';
	cos			= 'cos';
	cosh			= 'cosh';
	acos			= 'acos';
	sin			= 'sin';
	sinh			= 'sinh';
	asin			= 'asin';
	tan			= 'tan';
	atan			= 'atan';
	atan2			= 'atan2';
	tanh			= 'tanh';
	abs			= 'abs';
	lparen			= '(';
	rparen			= ')';

Productions		
	exp {-> exp}
		= {add}		[left]:exp add [right]:factor			{-> New exp.add(left, right.exp)}
		| {sub}		[left]:exp sub [right]:factor 			{-> New exp.sub(left, right.exp)}
		| {factor}	factor									{-> factor.exp}
		;
		
	factor {-> exp}
		= {mul}		[left]:factor mul [right]:unary			{-> New exp.mul(left.exp, right.exp)}
		| {div}		[left]:factor div [right]:unary			{-> New exp.div(left.exp, right.exp)}
		| {mod}		[left]:factor mod [right]:unary			{-> New exp.mod(left.exp, right.exp)}
		| {pow}		[left]:factor pow [right]:unary			{-> New exp.pow(left.exp, right.exp)}
		| {unary}	unary									{-> unary.exp}
		;
		
	unary {-> exp}
		= {number}	number							{-> New exp.number(number)}
		| {abs}		abs lparen exp rparen					{-> New exp.abs(exp)}
		| {sqrt}	sqrt lparen exp rparen					{-> New exp.sqrt(exp)}
		| {cos}		cos lparen exp rparen					{-> New exp.cos(exp)}
		| {acos}	acos lparen exp rparen					{-> New exp.acos(exp)}
		| {cosh}	cosh lparen exp rparen					{-> New exp.cosh(exp)}
		| {sin}		sin lparen exp rparen					{-> New exp.sin(exp)}
		| {asin}	asin lparen exp rparen					{-> New exp.asin(exp)}
		| {sinh}	sinh lparen exp rparen					{-> New exp.sinh(exp)}
		| {paren}	lparen exp rparen					{-> New exp.paren(exp)}
		| {tan}		tan lparen exp rparen					{-> New exp.tan(exp)}
		| {tanh}	tanh lparen exp rparen					{-> New exp.tanh(exp)}
		| {atan}	atan lparen exp rparen					{-> New exp.atan(exp)}
		| {atan2}	atan2 lparen exp rparen					{-> New exp.atan2(exp)}
		;
		
	exp_list {-> exp*}
		= {single}	exp										{-> [exp.exp]}
		| {multi}	exp [tail]:exp_list						{-> [exp.exp, tail.exp]}
		;
		
Abstract Syntax Tree
	exp
		= {add}			[left]:exp [right]:exp
		| {sub}			[left]:exp [right]:exp
		| {mul}			[left]:exp [right]:exp
		| {div}			[left]:exp [right]:exp
		| {mod}			[left]:exp [right]:exp
		| {pow}			[left]:exp [right]:exp
		| {paren}		exp
		| {sqrt}		exp
		| {cos}			exp
		| {acos}		exp
		| {cosh}		exp
		| {sin}			exp
		| {asin}		exp
		| {sinh}		exp
		| {tan}			exp
		| {tanh}		exp
		| {atan}		exp
		| {atan2}		exp
		| {abs}			exp
		| {number}		number
		;