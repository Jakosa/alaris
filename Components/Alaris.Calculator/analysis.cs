/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using Alaris.Calculator.node;

namespace Alaris.Calculator.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAAddExp(AAddExp node);
    void CaseASubExp(ASubExp node);
    void CaseAMulExp(AMulExp node);
    void CaseADivExp(ADivExp node);
    void CaseAModExp(AModExp node);
    void CaseAPowExp(APowExp node);
    void CaseAParenExp(AParenExp node);
    void CaseASqrtExp(ASqrtExp node);
    void CaseACosExp(ACosExp node);
    void CaseAAcosExp(AAcosExp node);
    void CaseACoshExp(ACoshExp node);
    void CaseASinExp(ASinExp node);
    void CaseAAsinExp(AAsinExp node);
    void CaseASinhExp(ASinhExp node);
    void CaseATanExp(ATanExp node);
    void CaseATanhExp(ATanhExp node);
    void CaseAAtanExp(AAtanExp node);
    void CaseAAtan2Exp(AAtan2Exp node);
    void CaseAAbsExp(AAbsExp node);
    void CaseANumberExp(ANumberExp node);

    void CaseTNumber(TNumber node);
    void CaseTAdd(TAdd node);
    void CaseTSub(TSub node);
    void CaseTMul(TMul node);
    void CaseTDiv(TDiv node);
    void CaseTMod(TMod node);
    void CaseTPow(TPow node);
    void CaseTSqrt(TSqrt node);
    void CaseTCos(TCos node);
    void CaseTCosh(TCosh node);
    void CaseTAcos(TAcos node);
    void CaseTSin(TSin node);
    void CaseTSinh(TSinh node);
    void CaseTAsin(TAsin node);
    void CaseTTan(TTan node);
    void CaseTAtan(TAtan node);
    void CaseTAtan2(TAtan2 node);
    void CaseTTanh(TTanh node);
    void CaseTAbs(TAbs node);
    void CaseTLparen(TLparen node);
    void CaseTRparen(TRparen node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAAddExp(AAddExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubExp(ASubExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMulExp(AMulExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivExp(ADivExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAModExp(AModExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPowExp(APowExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenExp(AParenExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASqrtExp(ASqrtExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACosExp(ACosExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAcosExp(AAcosExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACoshExp(ACoshExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASinExp(ASinExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAsinExp(AAsinExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASinhExp(ASinhExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATanExp(ATanExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATanhExp(ATanhExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAtanExp(AAtanExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAtan2Exp(AAtan2Exp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAbsExp(AAbsExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumberExp(ANumberExp node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTNumber(TNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAdd(TAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSub(TSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMul(TMul node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMod(TMod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPow(TPow node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSqrt(TSqrt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCos(TCos node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCosh(TCosh node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAcos(TAcos node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSin(TSin node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSinh(TSinh node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAsin(TAsin node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTan(TTan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAtan(TAtan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAtan2(TAtan2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTanh(TTanh node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAbs(TAbs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLparen(TLparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRparen(TRparen node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPExp().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAAddExp(AAddExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExp(AAddExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExp(AAddExp node)
    {
        InAAddExp(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAAddExp(node);
    }
    public virtual void InASubExp(ASubExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExp(ASubExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExp(ASubExp node)
    {
        InASubExp(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutASubExp(node);
    }
    public virtual void InAMulExp(AMulExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMulExp(AMulExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMulExp(AMulExp node)
    {
        InAMulExp(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAMulExp(node);
    }
    public virtual void InADivExp(ADivExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivExp(ADivExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivExp(ADivExp node)
    {
        InADivExp(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutADivExp(node);
    }
    public virtual void InAModExp(AModExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModExp(AModExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAModExp(AModExp node)
    {
        InAModExp(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAModExp(node);
    }
    public virtual void InAPowExp(APowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPowExp(APowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPowExp(APowExp node)
    {
        InAPowExp(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAPowExp(node);
    }
    public virtual void InAParenExp(AParenExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenExp(AParenExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenExp(AParenExp node)
    {
        InAParenExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAParenExp(node);
    }
    public virtual void InASqrtExp(ASqrtExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASqrtExp(ASqrtExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASqrtExp(ASqrtExp node)
    {
        InASqrtExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASqrtExp(node);
    }
    public virtual void InACosExp(ACosExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACosExp(ACosExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACosExp(ACosExp node)
    {
        InACosExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutACosExp(node);
    }
    public virtual void InAAcosExp(AAcosExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAcosExp(AAcosExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAcosExp(AAcosExp node)
    {
        InAAcosExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAcosExp(node);
    }
    public virtual void InACoshExp(ACoshExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACoshExp(ACoshExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACoshExp(ACoshExp node)
    {
        InACoshExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutACoshExp(node);
    }
    public virtual void InASinExp(ASinExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinExp(ASinExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASinExp(ASinExp node)
    {
        InASinExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASinExp(node);
    }
    public virtual void InAAsinExp(AAsinExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAsinExp(AAsinExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAsinExp(AAsinExp node)
    {
        InAAsinExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAsinExp(node);
    }
    public virtual void InASinhExp(ASinhExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinhExp(ASinhExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASinhExp(ASinhExp node)
    {
        InASinhExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASinhExp(node);
    }
    public virtual void InATanExp(ATanExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATanExp(ATanExp node)
    {
        DefaultOut(node);
    }

    public override void CaseATanExp(ATanExp node)
    {
        InATanExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutATanExp(node);
    }
    public virtual void InATanhExp(ATanhExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATanhExp(ATanhExp node)
    {
        DefaultOut(node);
    }

    public override void CaseATanhExp(ATanhExp node)
    {
        InATanhExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutATanhExp(node);
    }
    public virtual void InAAtanExp(AAtanExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAtanExp(AAtanExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAtanExp(AAtanExp node)
    {
        InAAtanExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAtanExp(node);
    }
    public virtual void InAAtan2Exp(AAtan2Exp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAtan2Exp(AAtan2Exp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAtan2Exp(AAtan2Exp node)
    {
        InAAtan2Exp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAtan2Exp(node);
    }
    public virtual void InAAbsExp(AAbsExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAbsExp(AAbsExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAbsExp(AAbsExp node)
    {
        InAAbsExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAbsExp(node);
    }
    public virtual void InANumberExp(ANumberExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberExp(ANumberExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberExp(ANumberExp node)
    {
        InANumberExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberExp(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPExp().Apply(this);
        OutStart(node);
    }

    public virtual void InAAddExp(AAddExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExp(AAddExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExp(AAddExp node)
    {
        InAAddExp(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAAddExp(node);
    }
    public virtual void InASubExp(ASubExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExp(ASubExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExp(ASubExp node)
    {
        InASubExp(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutASubExp(node);
    }
    public virtual void InAMulExp(AMulExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMulExp(AMulExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMulExp(AMulExp node)
    {
        InAMulExp(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAMulExp(node);
    }
    public virtual void InADivExp(ADivExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivExp(ADivExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivExp(ADivExp node)
    {
        InADivExp(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutADivExp(node);
    }
    public virtual void InAModExp(AModExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModExp(AModExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAModExp(AModExp node)
    {
        InAModExp(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAModExp(node);
    }
    public virtual void InAPowExp(APowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPowExp(APowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPowExp(APowExp node)
    {
        InAPowExp(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAPowExp(node);
    }
    public virtual void InAParenExp(AParenExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenExp(AParenExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenExp(AParenExp node)
    {
        InAParenExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAParenExp(node);
    }
    public virtual void InASqrtExp(ASqrtExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASqrtExp(ASqrtExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASqrtExp(ASqrtExp node)
    {
        InASqrtExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASqrtExp(node);
    }
    public virtual void InACosExp(ACosExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACosExp(ACosExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACosExp(ACosExp node)
    {
        InACosExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutACosExp(node);
    }
    public virtual void InAAcosExp(AAcosExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAcosExp(AAcosExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAcosExp(AAcosExp node)
    {
        InAAcosExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAcosExp(node);
    }
    public virtual void InACoshExp(ACoshExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACoshExp(ACoshExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACoshExp(ACoshExp node)
    {
        InACoshExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutACoshExp(node);
    }
    public virtual void InASinExp(ASinExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinExp(ASinExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASinExp(ASinExp node)
    {
        InASinExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASinExp(node);
    }
    public virtual void InAAsinExp(AAsinExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAsinExp(AAsinExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAsinExp(AAsinExp node)
    {
        InAAsinExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAsinExp(node);
    }
    public virtual void InASinhExp(ASinhExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinhExp(ASinhExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASinhExp(ASinhExp node)
    {
        InASinhExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASinhExp(node);
    }
    public virtual void InATanExp(ATanExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATanExp(ATanExp node)
    {
        DefaultOut(node);
    }

    public override void CaseATanExp(ATanExp node)
    {
        InATanExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutATanExp(node);
    }
    public virtual void InATanhExp(ATanhExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATanhExp(ATanhExp node)
    {
        DefaultOut(node);
    }

    public override void CaseATanhExp(ATanhExp node)
    {
        InATanhExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutATanhExp(node);
    }
    public virtual void InAAtanExp(AAtanExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAtanExp(AAtanExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAtanExp(AAtanExp node)
    {
        InAAtanExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAtanExp(node);
    }
    public virtual void InAAtan2Exp(AAtan2Exp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAtan2Exp(AAtan2Exp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAtan2Exp(AAtan2Exp node)
    {
        InAAtan2Exp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAtan2Exp(node);
    }
    public virtual void InAAbsExp(AAbsExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAbsExp(AAbsExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAbsExp(AAbsExp node)
    {
        InAAbsExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAbsExp(node);
    }
    public virtual void InANumberExp(ANumberExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberExp(ANumberExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberExp(ANumberExp node)
    {
        InANumberExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberExp(node);
    }
}
} // namespace Alaris.Calculator.analysis
